{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-swat-github-documentation","title":"Welcome to SWAT+ Github Documentation","text":"<p>IMPORTANT: If you are looking for documentation on the SWAT+ model, please visit https://swatplus.gitbook.io/io-docs/. This documentation is for users of the repositories in the SWAT-Research Group</p>"},{"location":"#about-our-github-account","title":"About our GitHub Account","text":"<p>The SWAT-Model Research Group has created a GitHub account to promote the reproducibility and transparency of our data analysis and research outcomes. Additionally, it provides an open-source avenue for hosting code developed within our group.</p>"},{"location":"#structure-of-the-groups-account","title":"Structure of the Group's account","text":"<p>The SWAT-Model GitHub account is structured as an organization with unlimited public and private repositories. A GitHub organization serves as an overarching structure where group members can collaborate and work on repositories. All our group's code is centralized in this space. Individual GitHub accounts can join this organization upon the invitation of one of the owners.</p>"},{"location":"#access-and-permissions","title":"Access and Permissions","text":"<p>All members are granted read access to both public and private repositories. Moreover, every member has the capability to create new repositories, to which they'll have write access. However, some repositories or branches will have more restrictions than others as needed.</p> <p>External collaborators can also be added to specific repositories by the repository owners/creators. For any questions or assistance, please contact @celray.</p>"},{"location":"collaborating/","title":"Collaborating Within the SWAT-Github Organization","text":"<p>Prerequisites : </p> <ul> <li>Make sure you're a member of the GitHub organization.</li> <li>Install Git and configure it on your local machine please refer to This Page.</li> </ul>"},{"location":"collaborating/#using-github-desktop","title":"Using GitHub Desktop","text":"<p>Pre-setup</p> <ul> <li>Make sure you have GitHub Desktop installed.</li> <li>Log in to GitHub Desktop with your GitHub account that is part of the organization.</li> </ul> <p>Clone the Repository</p> <ol> <li>Open GitHub Desktop.</li> <li>Go to <code>File</code> &gt; <code>Clone Repository</code>.</li> <li>Choose the tab for your organization and select the repository to clone.</li> <li>Click <code>Clone</code> and choose where you want to save the repository on your local machine.</li> </ol> <p>Create a New Branch</p> <ol> <li>In GitHub Desktop, ensure you are in the repository you just cloned.</li> <li>Click on the <code>Current Branch</code> dropdown in the top bar.</li> <li>Choose <code>New Branch</code> and give it a descriptive name.</li> <li>Click <code>Create Branch</code>.</li> </ol> <p>Make Changes</p> <ol> <li>Open the project files in a text editor or Integrated Development Environment (IDE) - Okay, okay fine... Visual Studio Code! If you do not use it, Try today! Don't delay!</li> <li>Make your desired changes and save them.</li> </ol> <p>Stage and Commit Changes</p> <ol> <li>Return to GitHub Desktop.</li> <li>You will see a list of changed files. You can select the files you want to include in your commit.</li> <li>In the bottom-left corner, write a commit message describing your changes.</li> <li>Click <code>Commit to [Your Branch Name]</code>.</li> </ol> <p>Push to New Branch</p> <ol> <li>Click <code>Publish branch</code> or <code>Push origin</code> to upload your commits to GitHub.</li> </ol> <p>Create a Pull Request (PR)</p> <ol> <li>Click on <code>Create Pull Request</code> within GitHub Desktop after pushing your changes.</li> <li>This will open a web browser where you can fill in the details of your Pull Request. Click <code>Create Pull Request</code> when ready.</li> </ol> <p>Review and Address Comments</p> <ol> <li>Team members can now review your PR and leave comments on GitHub.</li> <li>To make further changes, return to your text editor or IDE and repeat the process from the \"Make Changes\" step.</li> <li>Stage, commit, and push these additional changes to update the PR.</li> </ol> <p>Merging the PR</p> <ol> <li>Once the PR has been approved, someone with the appropriate permissions can merge it on GitHub.</li> <li>After the merge, you'll see an option to delete the remote branch.</li> </ol> <p>Pull Latest Changes for New Work</p> <ol> <li>Go back to GitHub Desktop.</li> <li>Click on the <code>Current Branch</code> dropdown and switch to the <code>main</code> or <code>master</code> branch.</li> <li>Click <code>Fetch origin</code> to pull the latest changes.</li> <li>If there are new updates, click <code>Pull origin</code> to update your local branch.</li> </ol>"},{"location":"collaborating/#using-vs-code","title":"Using VS Code","text":"<p>Pre-setup</p> <ul> <li>Make sure you have VS Code installed.</li> <li>Install the GitHub Pull Requests and Issues extension from the VS Code marketplace.</li> </ul> <p>Clone the Repository</p> <ol> <li>Open VS Code.</li> <li>Press <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on Mac) to open the command palette.</li> <li>Type and select <code>Git: Clone</code>, then paste the organization's repository URL.</li> <li>Choose a local directory to clone the repository into.</li> </ol> <p>Create a New Branch</p> <ol> <li>In the lower-left corner of VS Code, click on the branch icon.</li> <li>Select <code>Create New Branch</code>.</li> <li>Give your new branch a descriptive name.</li> </ol> <p>Make Changes</p> <ol> <li>Use VS Code to navigate through the project files.</li> <li>Make your changes using VS Code's text editor.</li> <li>Save your work (<code>Ctrl+S</code> or <code>Cmd+S</code>).</li> </ol> <p>Stage and Commit Changes</p> <ol> <li>Click on the source control icon in the sidebar (it looks like a branching fork).</li> <li>You'll see a list of changed files. Stage them by clicking on the <code>+</code> next to each file.</li> <li>In the text box at the top, enter a commit message describing your changes.</li> <li>Press the checkmark at the top to commit your changes.</li> </ol> <p>Push to New Branch</p> <ol> <li>Open the terminal in VS Code (<code>Ctrl+\\`` or</code>Cmd+``).</li> <li>Run <code>git push origin [Your Branch Name]</code>.</li> </ol> <p>Create a Pull Request (PR)</p> <ol> <li>Go to the GitHub page of your organization's repository.</li> <li>You'll likely see a prompt to create a new Pull Request; if so, click it.</li> <li>Fill in the PR title and description, then click \"Create Pull Request\".</li> </ol> <p>Review and Address Comments</p> <ol> <li>Team members can now review your PR and leave comments on GitHub.</li> <li>Make any necessary changes in VS Code.</li> <li>Stage, commit, and push these changes to the same branch to update the PR.</li> </ol> <p>Merging the PR</p> <ol> <li>Once the PR is reviewed and approved, someone with the correct permissions can merge it on GitHub.</li> <li>Optionally, you can delete the feature branch from GitHub once it has been merged.</li> </ol> <p>Pull Latest Changes for New Work</p> <ol> <li>In VS Code, switch back to the <code>main</code> branch by clicking on the branch icon in the lower-left corner.</li> <li>Open the terminal and run <code>git pull origin main</code>.</li> </ol>"},{"location":"collaborating/#using-command-line","title":"Using Command Line","text":"<p>If you feel like being a nerd (we know you do), then this is for you.</p> <p>1. Clone the Repository</p> <ul> <li>Why: To get a local copy of the code on your machine.</li> <li>How: Open your terminal (Command Prompt, Terminal, Git Bash, etc.) and navigate to the directory where you'd like to place the project.</li> </ul> <p><code>bash   git clone https://github.com/swat-model/repository-name.git</code></p> <p>2. Navigate to the Cloned Directory</p> <ul> <li>Why: To perform all Git operations inside this directory.</li> <li>How: Use the <code>cd</code> command in your terminal.</li> </ul> <p><code>bash   cd repository-name</code></p> <p>3. Create a New Branch</p> <ul> <li>Why: To isolate your changes and make collaboration easier.</li> <li>How: Create and switch to a new branch in your terminal.</li> </ul> <p><code>bash   git checkout -b feature-branch-name</code></p> <p>4. Make Changes</p> <ul> <li>Why: To implement new features or fix bugs.</li> <li>How: Open the project in your preferred text editor or IDE and make your changes.</li> </ul> <p>5. Stage Changes</p> <ul> <li>Why: To prepare your changes for a commit.</li> <li>How: Stage all changed files using the <code>git add</code> command.</li> </ul> <p><code>bash   git add .</code></p> <p>Note: Use <code>git add file-name</code> to stage individual files.</p> <p>6. Commit Changes</p> <ul> <li>Why: To save your staged changes along with a descriptive message.</li> <li>How: Commit your changes with a message describing what you've done.</li> </ul> <p><code>bash   git commit -m \"Implemented feature X\"</code></p> <p>7. Push to the Organization Repository</p> <ul> <li>Why: To upload your local changes to the remote repository.</li> <li>How: Push your branch to the remote repository.</li> </ul> <p><code>bash   git push origin feature-branch-name</code></p> <p>8. Create a Pull Request</p> <ul> <li>Why: To propose that your changes be merged into the main codebase.</li> <li>How:</li> <li>Go to the GitHub page of the swat-model organization's repository.</li> <li>Click on \"Pull Requests\" then \"New Pull Request\".</li> <li>Select your branch from the \"compare\" dropdown.</li> <li>Add a title and description to your pull request.</li> <li>Click \"Create Pull Request\".</li> </ul> <p>9. Review and Address Feedback</p> <ul> <li>Why: To ensure code quality and functionality.</li> <li>How:</li> <li>Team members review the pull request and provide feedback.</li> <li>If changes are required, repeat steps 4-7.</li> </ul> <p>10. Merge the Pull Request</p> <ul> <li>Why: To include your changes in the project's main codebase.</li> <li>How: Once your pull request has been reviewed and approved, anyone with merge permissions can merge it.</li> </ul> <p><code>bash   Click on \"Merge Pull Request\" and then \"Confirm Merge\".</code></p> <p>11. Sync Your Local Main Branch</p> <ul> <li>Why: To keep your local repository updated.</li> <li>How: Pull the latest changes from the organization's repository.</li> </ul> <p><code>bash   git checkout main   git pull origin main</code></p>"},{"location":"collaborating/#why-not-commit-directly-to-the-main-branch","title":"Why Not Commit Directly to the Main Branch?","text":"<p>While it's technically possible to clone a repository and commit directly to the main branch (if you have the necessary permissions), this approach is generally discouraged for the following reasons:</p> <p>1. Code Quality and Review</p> <ul> <li>Ensuring high code quality, adherence to coding standards, and catching potential bugs or security vulnerabilities. Working on a feature branch and submitting a pull request provides an opportunity for team members to review and comment on your code.</li> </ul> <p>2. Isolation of Features or Bugs</p> <ul> <li>Isolating the development work for specific features or bug fixes. If a feature branch introduces bugs, it won't affect the main codebase, allowing developers time to fix issues before merging.</li> </ul> <p>3. Concurrent Development</p> <ul> <li>Multiple team members can work on different features or bug fixes simultaneously without interference. Each developer works in their own branch, which can later be merged into the main branch after review.</li> </ul> <p>4. Rollback and History Clarity</p> <ul> <li>Easier to roll back features or changes when they are isolated in their own branches. Git history will clearly show each feature as a merge commit from a branch, making it easier to identify and revert, if necessary.</li> </ul> <p>5. Access Control and Permissions</p> <ul> <li>Control over who can commit directly to the main branch, which should represent the stable version of the project. Setting branch protection rules allows control over who can push to the main or master branches and requires certain checks to pass before merging.</li> </ul> <p>6. Prevent Unstable Code</p> <ul> <li>Direct commits to the main branch can result in an unstable or broken codebase, affecting all team members. Feature branches must pass continuous integration tests and get approved through code review before merging into the main branch.</li> </ul> <p>7. Documentation and Understanding</p> <ul> <li>Pull requests provide a forum for discussing the proposed changes, adding to the project's documentation and understanding. The discussion on a pull request can be referred to in the future for context, serving as valuable project documentation.</li> </ul> <p>For these reasons, the best practice is to clone the repository, create a new branch for your feature or fix, commit your changes to that branch, and then open a pull request for review. After approval, the changes can then be merged into the main or master branch.</p>"},{"location":"managing/","title":"How to Manage a Repository (This page is being updated)","text":"<p>After getting your code to your repo, you have a responsibility to manage it. Here are the tasks that you may need to perform at times.</p>"},{"location":"managing/#code-management","title":"Code Management","text":""},{"location":"managing/#step-1-branch-management","title":"Step 1: Branch Management","text":"<p>You may need to create a new branch. Here is how to do that. 1. Create a new branch for feature development or bug fixes:     <code>bash     git checkout -b &lt;branch-name&gt;</code> 2. Push the new branch to GitHub:     <code>bash     git push origin &lt;branch-name&gt;</code></p>"},{"location":"managing/#step-2-pull-requests","title":"Step 2: Pull Requests","text":"<p>Sometimes, you may need to do the following: 1. Create a new Pull Request (PR) from GitHub interface. 2. Review the PR, and resolve any conflicts or issues.</p>"},{"location":"managing/#step-3-code-reviews","title":"Step 3: Code Reviews","text":"<p>This includes: 1. Comment on code lines for any improvements or corrections. 2. Approve or request changes on the PR.</p>"},{"location":"managing/#step-4-version-control","title":"Step 4: Version Control","text":"<ol> <li>Tag a commit to create a new release version:     <code>bash     git tag &lt;version-number&gt;     git push origin --tags</code></li> </ol>"},{"location":"managing/#step-5-conflict-resolution","title":"Step 5: Conflict Resolution","text":"<p>This includes the following: 1. Fetch the latest changes from the remote repository:     <code>bash     git fetch origin</code> 2. Merge changes and resolve conflicts manually, then commit.</p>"},{"location":"managing/#step-6-automation","title":"Step 6: Automation","text":"<ol> <li>Setup CI/CD pipelines via GitHub Actions or external services.</li> <li>Monitor build and test statuses for PRs and merges.</li> </ol>"},{"location":"managing/#documentation","title":"Documentation","text":""},{"location":"managing/#readme-file","title":"README File","text":"<ul> <li>Make sure to maintain an updated <code>README.md</code> that outlines:</li> <li>Project purpose</li> <li>Setup instructions</li> <li>How to contribute</li> </ul> <p>A template is provided here.</p>"},{"location":"managing/#wiki-or-detailed-documentation","title":"Wiki or Detailed Documentation","text":"<p>If you have documentation, utilize the GitHub Wiki feature or add a <code>/docs</code> folder for detailed documentation.</p>"},{"location":"managing/#code-comments","title":"Code Comments","text":"<ul> <li>Document your codebase with inline comments and docstrings for functions/methods.</li> </ul> <p>Example:</p> <pre><code>def add_numbers(a, b):\n    \"\"\"\n    Add two numbers together\n    \"\"\"\n    return a + b\n</code></pre>"},{"location":"managing/#additional-documentation","title":"Additional Documentation","text":"<ul> <li>Include any additional <code>.md</code> files for FAQs, troubleshooting, etc.</li> <li>Use relative links to navigate between documentation files.</li> </ul> <p>Example:</p> <pre><code>[FAQ](./FAQ.md)\n</code></pre>"},{"location":"managing/#issue-tracking-quick-guide","title":"Issue Tracking: Quick Guide","text":""},{"location":"managing/#introduction","title":"Introduction","text":"<p>Issue tracking is a crucial part of managing a GitHub repository. Here, your responsibilities are to keep an eye on the problems, enhancements, tasks, and other kinds of questions that are meant for discussion.</p>"},{"location":"managing/#tasks-involved","title":"Tasks Involved","text":"<p>The tasks involved include:</p>"},{"location":"managing/#1-creating-issues","title":"1. Creating Issues","text":"<ul> <li>Anyone can create an issue in a public repository, but in a private repository, only collaborators can do this.</li> </ul> <pre><code># Navigate to 'Issues' tab and click 'New Issue'\n</code></pre>"},{"location":"managing/#2-labeling-issues","title":"2. Labeling Issues","text":"<ul> <li>Use labels to categorize issues. Predefined labels include 'bug', 'enhancement', and 'documentation', among others.</li> </ul> <pre><code># Click on an issue, then click on the 'Labels' button to assign labels\n</code></pre>"},{"location":"managing/#3-assigning-issues","title":"3. Assigning Issues","text":"<ul> <li>Assign issues to appropriate team members for actioning.</li> </ul> <pre><code># Click on an issue, then click on the 'Assignees' button to assign team members\n</code></pre>"},{"location":"managing/#4-setting-milestones","title":"4. Setting Milestones","text":"<ul> <li>Milestones help in tracking the progress of multiple issues or pull requests.</li> </ul> <pre><code># Click on an issue, then click on the 'Milestones' button to set a milestone\n</code></pre>"},{"location":"managing/#5-closing-issues","title":"5. Closing Issues","text":"<ul> <li>Once resolved, issues should be closed to indicate that they require no further action.</li> </ul> <pre><code># Click on an issue, then click on the 'Close Issue' button\n</code></pre>"},{"location":"managing/#community-and-collaboration","title":"Community and Collaboration","text":""},{"location":"managing/#code-of-conduct","title":"Code of Conduct","text":"<p>Here, your responsibilities are to set the rules and guidelines for community behavior. This helps in fostering a welcoming and inclusive environment.</p> <ul> <li>Task Involved: Create a <code>CODE_OF_CONDUCT.md</code> file outlining the expectations, rules, and consequences.</li> </ul>"},{"location":"managing/#contributing-guidelines","title":"Contributing Guidelines","text":"<p>In this section, your tasks involve outlining the process for contributions from external members.</p> <ul> <li>Tasks Involved: Add a <code>CONTRIBUTING.md</code> file that details steps for submitting pull requests, reporting bugs, and asking questions.</li> </ul>"},{"location":"managing/#user-support","title":"User Support","text":"<p>Here, your responsibilities are to manage community interactions, be it questions, concerns, or suggestions.</p> <ul> <li>Tasks Involved: Monitor GitHub Issues and Discussions for community interactions and provide timely responses.</li> </ul>"},{"location":"managing/#issue-assignment-and-tracking","title":"Issue Assignment and Tracking","text":"<p>Your tasks here involve ensuring that issues and pull requests are assigned to appropriate team members for timely resolution.</p> <ul> <li>Tasks Involved: Use labels, milestones, and assignees to categorize and track issues and pull requests.</li> </ul>"},{"location":"managing/#security-and-compliance-quick-guide","title":"Security and Compliance: Quick Guide","text":"<p>Here, your responsibilities are crucial for ensuring both the safety of the code and the legality of its distribution.</p>"},{"location":"managing/#step-1-choose-and-maintain-a-license","title":"Step 1: Choose and Maintain a License","text":"<p>The tasks involved include selecting an appropriate open-source license and attaching it to your repository. This sets the terms under which others can use, modify, or distribute your code.</p> <pre><code>License &gt; Choose a license &gt; Attach to README or separate LICENSE file\n</code></pre>"},{"location":"managing/#step-2-keep-code-and-dependencies-up-to-date","title":"Step 2: Keep Code and Dependencies Up To Date","text":"<p>Regularly update any dependencies and libraries your code relies on to the latest secure versions.</p> <pre><code>npm update // Example for Node.js\n</code></pre>"},{"location":"managing/#step-3-enable-security-features","title":"Step 3: Enable Security Features","text":"<p>GitHub offers automated security features like Dependabot, which scans for known vulnerabilities. Enable this to help mitigate risks.</p> <pre><code>Settings &gt; Security &amp; analysis &gt; Enable Dependabot\n</code></pre>"},{"location":"managing/#step-4-audit-and-logging","title":"Step 4: Audit and Logging","text":"<p>Set up audit logs to keep track of activity within your repository. This is especially crucial for compliance with data protection regulations.</p> <pre><code>Settings &gt; Audit log &gt; Review activities\n</code></pre> <p>By completing these steps, you're contributing to the safety and compliance of your project.</p>"},{"location":"managing/#maintenance-and-monitoring","title":"Maintenance and Monitoring","text":"<p>Here, your responsibilities are centered around ensuring the repository's long-term health and stability. Regular oversight is necessary to maintain code quality, resolve issues, and manage updates.</p>"},{"location":"managing/#tasks-involved-include","title":"Tasks Involved Include:","text":""},{"location":"managing/#monitoring","title":"Monitoring:","text":"<ul> <li>Issue Tracking: Regularly check for new issues and pull requests. Assign them to appropriate team members and labels.</li> <li>Security Alerts: Stay vigilant for any security vulnerabilities and act promptly to resolve them.</li> <li>User Activity: Monitor contributions, forks, and stars as indicators of community engagement.</li> </ul>"},{"location":"managing/#updates","title":"Updates:","text":"<ul> <li>Dependencies: Periodically update all project dependencies to their latest stable versions.</li> <li>Code Reviews: Consistently review any code changes or additions to maintain the code quality.</li> </ul>"},{"location":"managing/#releases","title":"Releases:","text":"<ul> <li>Versioning: Implement semantic versioning for the codebase and create new releases when needed.</li> <li>Changelogs: Maintain a changelog that lists the changes made in each new release.</li> </ul>"},{"location":"managing/#cleanup","title":"Cleanup:","text":"<ul> <li>Branch Management: Remove stale or merged branches.</li> <li>Issue Closure: Close resolved or outdated issues and pull requests.</li> </ul>"},{"location":"setup/","title":"Set Up Git","text":""},{"location":"setup/#create-account","title":"Create Account","text":"<p>Create a free GitHub account at github.com, choosing a unique username and providing your email. Opt for the free plan for unlimited public repositories (and private repositories too). Click the top-right profile picture to personalize your profile.</p> <p>To join the SWAT-Model Research Group on GitHub, reach out to: Celray James: Profile , Jaclyn: Profile , Christoph: Profile</p> <p>For a primer on GitHub, see the 'GitHub Hello World Guide'.</p> <p>In the next section, we'll discuss using Git for code management. Git allows for changes to local repositories and then pushes to GitHub. An SSH key is essential for a secure connection between your device and GitHub but it is not mandatory.</p>"},{"location":"setup/#get-your-code-to-a-repo","title":"Get your code to a repo","text":"<p>You can create your repository on Github web or publish one from any of the methods we will discuss soon.</p> <p>There are different ways to get your code to Github but in this guide, we briefly mention a few. For more detailed instructions please visit documentation for each of the software mentioned.</p>"},{"location":"setup/#1-github-desktop","title":"1. GitHub Desktop","text":"<p>This is the easiest method and is recommended for beginners.</p> <p>Here is how to get code to GitHub using GitHub Desktop:</p> <ol> <li>Setup</li> <li>Download and install GitHub Desktop.</li> <li>Log in with your GitHub account.</li> <li>Clone a Repository</li> <li>Click on <code>File</code> &gt; <code>Clone Repository</code> from the main menu.</li> <li>Select a repository from the list or enter a repository URL.</li> <li>Make Changes</li> <li>Edit files in your preferred text editor.</li> <li>Commit Changes</li> <li>Return to GitHub Desktop. It will show changed files.</li> <li>Enter a commit message and description.</li> <li>Click <code>Commit to master</code> (or your current branch).</li> <li>Push Changes</li> <li>Click the <code>Push Origin</code> button at the top.</li> <li>Syncing</li> <li>To pull changes from GitHub, click the <code>Fetch origin</code> button.</li> </ol>"},{"location":"setup/#2-visual-studio-code","title":"2. Visual Studio Code","text":"<p>This is moderately easy. Here is how to get code to GitHub using Visual Studio Code:</p> <ol> <li>Setup</li> <li>Install Visual Studio Code.</li> <li>Install the Git extension if it isn't already.</li> <li>Clone a Repository</li> <li>Press <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on Mac).</li> <li>Type <code>Git: Clone</code> and paste the repository URL.</li> <li>Make Changes</li> <li>Edit files directly within VS Code.</li> <li>Commit Changes</li> <li>Click on the source control icon on the sidebar.</li> <li>Enter a commit message.</li> <li>Press the checkmark at the top.</li> <li>Push Changes</li> <li>Click on the ellipsis (<code>...</code>) &gt; <code>Push</code>.</li> <li>Syncing</li> <li>Click the sync icon at the bottom left to fetch and integrate changes.</li> </ol>"},{"location":"setup/#3-command-line","title":"3. Command Line","text":""},{"location":"setup/#a-git-cli","title":"a. Git CLI:","text":"<p>Here is how to get code to GitHub using Git CLI:</p> <ol> <li>Setup</li> <li>Install Git.</li> <li>Clone a Repository</li> <li><code>git clone [repository-url]</code>.</li> <li>Make Changes</li> <li>Use your preferred text editor to make changes.</li> <li>Commit Changes</li> <li><code>git add .</code></li> <li><code>git commit -m \"Your commit message here\"</code>.</li> <li>Push Changes</li> <li><code>git push origin master</code> (or your current branch).</li> <li>Syncing</li> <li><code>git pull</code> to pull changes from GitHub.</li> </ol>"},{"location":"setup/#b-github-cli","title":"b. GitHub CLI:","text":"<p>Here is how to get code to GitHub using GitHub CLI:</p> <ol> <li>Setup</li> <li>Install GitHub CLI.</li> <li>Authenticate using <code>gh auth login</code>.</li> <li>Clone a Repository</li> <li><code>gh repo clone [repository-url or owner/repo]</code>.</li> <li>Make Changes</li> <li>Edit files with your preferred text editor.</li> <li>Commit Changes</li> <li><code>git add .</code></li> <li><code>git commit -m \"Commit message\"</code>.</li> <li>Push Changes</li> <li><code>git push origin master</code> (or your current branch).</li> <li>Open Pull Requests, Issues, etc.</li> <li>Use various <code>gh</code> commands like <code>gh pr create</code> or <code>gh issue create</code>.</li> </ol> <p>Remember, the best method often aligns with your comfort level and the tasks you're trying to accomplish. Starting with GitHub Desktop and progressing to the command line as you become more comfortable can be a great way to gradually build your Git and GitHub skills.</p>"}]}